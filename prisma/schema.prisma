// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Chain {
  ETH
  BTC
  POLYGON
  SOLANA
}

enum TxStatus {
  PENDING
  CONFIRMED
  FAILED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  wallets   Wallet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id          String        @id @default(cuid())
  label       String?
  ownerId     Int
  providerId  String?
  addresses   Address[]
  deposits    Deposit[]
  withdrawals Withdrawal[]
  txIn        Transaction[] @relation("TxTo")
  txOut       Transaction[] @relation("TxFrom")

  owner    User            @relation(fields: [ownerId], references: [id])
  provider WalletProvider? @relation(fields: [providerId], references: [id])
  Balance  Balance[]
}

model Address {
  id       Int    @id @default(autoincrement())
  chain    Chain
  address  String @unique
  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id])
}

model WalletProvider {
  id      String   @id @default(cuid())
  name    String
  rpcUrl  String
  wallets Wallet[]
}

model Deposit {
  id        String   @id @default(cuid())
  walletId  String
  amount    Float
  txHash    String   @unique
  status    TxStatus @default(PENDING)
  createdAt DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id])
}

model Withdrawal {
  id        String   @id @default(cuid())
  walletId  String
  amount    Float
  txHash    String   @unique
  status    TxStatus @default(PENDING)
  createdAt DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id])
}

model Transaction {
  id        String   @id @default(cuid())
  fromId    String?
  toId      String?
  amount    Float
  txHash    String   @unique
  status    TxStatus @default(PENDING)
  createdAt DateTime @default(now())

  from Wallet? @relation("TxFrom", fields: [fromId], references: [id])
  to   Wallet? @relation("TxTo", fields: [toId], references: [id])
}

model SmartContract {
  id        String   @id @default(cuid())
  name      String
  address   String   @unique
  abi       Json
  chain     Chain
  createdAt DateTime @default(now())
}

model Token {
  id        String    @id @default(cuid())
  name      String
  symbol    String
  decimals  Int
  contract  String    @unique
  chain     Chain
  createdAt DateTime  @default(now())
  balances  Balance[]
}

model Balance {
  id       String @id @default(cuid())
  walletId String
  tokenId  String
  amount   Float  @default(0)

  wallet Wallet @relation(fields: [walletId], references: [id])
  token  Token  @relation(fields: [tokenId], references: [id])
}
